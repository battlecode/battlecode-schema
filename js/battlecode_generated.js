// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var battlecode = battlecode || {};

/**
 * @const
 * @namespace
 */
battlecode.schema = battlecode.schema || {};

/**
 * The possible types of things that can exist.
 * Note that neutral trees and bullets are not treated as bodies.
 *
 * @enum
 */
battlecode.schema.BodyType = {
  /**
   * Archons are the mobile equivalent of a HQ whose sole purpose is to hire
   * gardeners to maintain the land.
   */
  ARCHON: 0,

  /**
   * Gardeners are caretakers of the land, planting and watering Bullet Trees
   * while also cultivating all other player robots.
   */
  GARDENER: 1,

  /**
   * Lumberjacks are melee units equipped for felling trees.
   */
  LUMBERJACK: 2,

  /**
   * Soldiers are all-around units with a tricky shot.
   */
  SOLDIER: 3,

  /**
   * Tanks are large, slow units with powerful bullets.
   */
  TANK: 4,

  /**
   * Scouts are fast units that move around without obstruction.
   */
  SCOUT: 5,

  /**
   * A tree that belongs to a team and produces bullets.
   */
  TREE_BULLET: 6,

  /**
   * A neutral tree.
   * This is included for convenience; note this value SHALL NOT appear in
   * a SpawnedBodyTable.
   */
  TREE_NEUTRAL: 7,

  /**
   * A bullet that moves in a perfectly straight line.
   * Note: bullet location updates are not sent; a bullet is defined to be
   * in position loc + dt * vel after dt seconds.
   * This allows us some significant space savings, since there are lots
   * of bullets, and we don't need to send position updates.
   * The event stream will say if a bullet has been destroyed.
   * This is included for convenience; note this value SHALL NOT appear in
   * a SpawnedBodyTable.
   */
  BULLET: 8,

  /**
   * Indicates that there is no body.
   * May only appear in the containedBodies field of NeutralTreeTable.
   */
  NONE: 9
};

/**
 * Actions that can be performed.
 * Purely aesthetic; have no actual effect on simulation.
 * (Although the simulation may want to track the 'parents' of
 * particular robots.)
 * Actions may have 'targets', which are the units on which
 * the actions were performed.
 *
 * @enum
 */
battlecode.schema.Action = {
  /**
   * Fire a bullet.
   * Target: spawned bullet.
   */
  FIRE: 0,

  /**
   * Fire three bullets.
   * Target: spawned bullets.
   */
  FIRE_TRIAD: 1,

  /**
   * Fire five bullets.
   * Target: spawned bullets.
   */
  FIRE_PENTAD: 2,

  /**
   * Perform a lumberjack-chop.
   * Target: none
   */
  CHOP: 3,

  /**
   * Shake a tree.
   * Target: tree
   */
  SHAKE_TREE: 4,

  /**
   * Plant a tree.
   * Target: tree
   */
  PLANT_TREE: 5,

  /**
   * Water a tree.
   * Target: tree
   */
  WATER_TREE: 6,

  /**
   * Build a unit.
   * Target: spawned unit
   */
  SPAWN_UNIT: 7,

  /**
   * Die due to an uncaught exception
   * Target: none
   */
  DIE_EXCEPTION: 8,

  /**
   * Die due to suicide.
   * Target: none
   */
  DIE_SUICIDE: 9,

  /**
   * Die due to being killed.
   * Target: killer (bullet or lumberjack or tank)
   */
  DIE_KILLED: 10,

  /**
   * Perform a lumberjack strike.
   * Target: none
   */
  LUMBERJACK_STRIKE: 11
};

/**
 * An Event is a single step that needs to be processed.
 * A saved game simply consists of a long list of Events.
 * Events can be divided by either being sent separately (e.g. as separate
 * websocket messages), or by being wrapped with a GameWrapper.
 * A game consists of a series of matches; a match consists of a series of
 * rounds, and is played on a single map. Each round is a single simulation
 * step.
 *
 * @enum
 */
battlecode.schema.Event = {
  NONE: 0,

  /**
   * There should only be one GameHeader, at the start of the stream.
   */
  GameHeader: 1,

  /**
   * There should be one MatchHeader at the start of each match.
   */
  MatchHeader: 2,

  /**
   * A single simulation step. A round may be skipped if
   * nothing happens during its time.
   */
  Round: 3,

  /**
   * There should be one MatchFooter at the end of each simulation step.
   */
  MatchFooter: 4,

  /**
   * There should only be one GameFooter, at the end of the stream.
   */
  GameFooter: 5
};

/**
 * A vector in two-dimensional space. Continuous space, of course.
 * Defaults to the 0 vector.
 *
 * @constructor
 */
battlecode.schema.Vec = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {battlecode.schema.Vec}
 */
battlecode.schema.Vec.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns {number}
 */
battlecode.schema.Vec.prototype.x = function() {
  return this.bb.readFloat32(this.bb_pos);
};

/**
 * @returns {number}
 */
battlecode.schema.Vec.prototype.y = function() {
  return this.bb.readFloat32(this.bb_pos + 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} x
 * @param {number} y
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.Vec.createVec = function(builder, x, y) {
  builder.prep(4, 8);
  builder.writeFloat32(y);
  builder.writeFloat32(x);
  return builder.offset();
};

/**
 * A table of vectors.
 *
 * @constructor
 */
battlecode.schema.VecTable = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {battlecode.schema.VecTable}
 */
battlecode.schema.VecTable.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.VecTable=} obj
 * @returns {battlecode.schema.VecTable}
 */
battlecode.schema.VecTable.getRootAsVecTable = function(bb, obj) {
  return (obj || new battlecode.schema.VecTable).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.VecTable.prototype.xs = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
battlecode.schema.VecTable.prototype.xsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Float32Array}
 */
battlecode.schema.VecTable.prototype.xsArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.VecTable.prototype.ys = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
battlecode.schema.VecTable.prototype.ysLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Float32Array}
 */
battlecode.schema.VecTable.prototype.ysArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
battlecode.schema.VecTable.startVecTable = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} xsOffset
 */
battlecode.schema.VecTable.addXs = function(builder, xsOffset) {
  builder.addFieldOffset(0, xsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.VecTable.createXsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.VecTable.startXsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} ysOffset
 */
battlecode.schema.VecTable.addYs = function(builder, ysOffset) {
  builder.addFieldOffset(1, ysOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.VecTable.createYsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.VecTable.startYsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.VecTable.endVecTable = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * A table of RGB values.
 *
 * @constructor
 */
battlecode.schema.RGBTable = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {battlecode.schema.RGBTable}
 */
battlecode.schema.RGBTable.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.RGBTable=} obj
 * @returns {battlecode.schema.RGBTable}
 */
battlecode.schema.RGBTable.getRootAsRGBTable = function(bb, obj) {
  return (obj || new battlecode.schema.RGBTable).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.RGBTable.prototype.red = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
battlecode.schema.RGBTable.prototype.redLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Int32Array}
 */
battlecode.schema.RGBTable.prototype.redArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.RGBTable.prototype.green = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
battlecode.schema.RGBTable.prototype.greenLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Int32Array}
 */
battlecode.schema.RGBTable.prototype.greenArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.RGBTable.prototype.blue = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
battlecode.schema.RGBTable.prototype.blueLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Int32Array}
 */
battlecode.schema.RGBTable.prototype.blueArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
battlecode.schema.RGBTable.startRGBTable = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} redOffset
 */
battlecode.schema.RGBTable.addRed = function(builder, redOffset) {
  builder.addFieldOffset(0, redOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.RGBTable.createRedVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.RGBTable.startRedVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} greenOffset
 */
battlecode.schema.RGBTable.addGreen = function(builder, greenOffset) {
  builder.addFieldOffset(1, greenOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.RGBTable.createGreenVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.RGBTable.startGreenVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} blueOffset
 */
battlecode.schema.RGBTable.addBlue = function(builder, blueOffset) {
  builder.addFieldOffset(2, blueOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.RGBTable.createBlueVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.RGBTable.startBlueVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.RGBTable.endRGBTable = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * A list of new bodies to be placed on the map.
 *
 * @constructor
 */
battlecode.schema.SpawnedBodyTable = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {battlecode.schema.SpawnedBodyTable}
 */
battlecode.schema.SpawnedBodyTable.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.SpawnedBodyTable=} obj
 * @returns {battlecode.schema.SpawnedBodyTable}
 */
battlecode.schema.SpawnedBodyTable.getRootAsSpawnedBodyTable = function(bb, obj) {
  return (obj || new battlecode.schema.SpawnedBodyTable).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * The numeric ID of the new bodies.
 * Will never be negative.
 * There will only be one body/bullet with a particular ID at a time.
 * So, there will never be two robots with the same ID, or a robot and
 * a bullet with the same ID.
 *
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.SpawnedBodyTable.prototype.robotIDs = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
battlecode.schema.SpawnedBodyTable.prototype.robotIDsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Int32Array}
 */
battlecode.schema.SpawnedBodyTable.prototype.robotIDsArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * The teams of the new bodies.
 *
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.SpawnedBodyTable.prototype.teamIDs = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readInt8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
};

/**
 * @returns {number}
 */
battlecode.schema.SpawnedBodyTable.prototype.teamIDsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Int8Array}
 */
battlecode.schema.SpawnedBodyTable.prototype.teamIDsArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? new Int8Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * The types of the new bodies.
 *
 * @param {number} index
 * @returns {battlecode.schema.BodyType}
 */
battlecode.schema.SpawnedBodyTable.prototype.types = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? /** @type {battlecode.schema.BodyType} */ (this.bb.readInt8(this.bb.__vector(this.bb_pos + offset) + index)) : 0;
};

/**
 * @returns {number}
 */
battlecode.schema.SpawnedBodyTable.prototype.typesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Int8Array}
 */
battlecode.schema.SpawnedBodyTable.prototype.typesArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? new Int8Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * The locations of the bodies.
 *
 * @param {battlecode.schema.VecTable=} obj
 * @returns {battlecode.schema.VecTable}
 */
battlecode.schema.SpawnedBodyTable.prototype.locs = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? (obj || new battlecode.schema.VecTable).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
battlecode.schema.SpawnedBodyTable.startSpawnedBodyTable = function(builder) {
  builder.startObject(4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} robotIDsOffset
 */
battlecode.schema.SpawnedBodyTable.addRobotIDs = function(builder, robotIDsOffset) {
  builder.addFieldOffset(0, robotIDsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.SpawnedBodyTable.createRobotIDsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.SpawnedBodyTable.startRobotIDsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} teamIDsOffset
 */
battlecode.schema.SpawnedBodyTable.addTeamIDs = function(builder, teamIDsOffset) {
  builder.addFieldOffset(1, teamIDsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.SpawnedBodyTable.createTeamIDsVector = function(builder, data) {
  builder.startVector(1, data.length, 1);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.SpawnedBodyTable.startTeamIDsVector = function(builder, numElems) {
  builder.startVector(1, numElems, 1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} typesOffset
 */
battlecode.schema.SpawnedBodyTable.addTypes = function(builder, typesOffset) {
  builder.addFieldOffset(2, typesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<battlecode.schema.BodyType>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.SpawnedBodyTable.createTypesVector = function(builder, data) {
  builder.startVector(1, data.length, 1);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.SpawnedBodyTable.startTypesVector = function(builder, numElems) {
  builder.startVector(1, numElems, 1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} locsOffset
 */
battlecode.schema.SpawnedBodyTable.addLocs = function(builder, locsOffset) {
  builder.addFieldOffset(3, locsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.SpawnedBodyTable.endSpawnedBodyTable = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * A list of neutral trees to be placed on the map.
 *
 * @constructor
 */
battlecode.schema.NeutralTreeTable = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {battlecode.schema.NeutralTreeTable}
 */
battlecode.schema.NeutralTreeTable.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.NeutralTreeTable=} obj
 * @returns {battlecode.schema.NeutralTreeTable}
 */
battlecode.schema.NeutralTreeTable.getRootAsNeutralTreeTable = function(bb, obj) {
  return (obj || new battlecode.schema.NeutralTreeTable).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * The IDs of the trees.
 *
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.NeutralTreeTable.prototype.robotIDs = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
battlecode.schema.NeutralTreeTable.prototype.robotIDsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Int32Array}
 */
battlecode.schema.NeutralTreeTable.prototype.robotIDsArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * The locations of the trees.
 *
 * @param {battlecode.schema.VecTable=} obj
 * @returns {battlecode.schema.VecTable}
 */
battlecode.schema.NeutralTreeTable.prototype.locs = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new battlecode.schema.VecTable).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * The radii of the trees.
 *
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.NeutralTreeTable.prototype.radii = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
battlecode.schema.NeutralTreeTable.prototype.radiiLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Float32Array}
 */
battlecode.schema.NeutralTreeTable.prototype.radiiArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * The healths of the trees.
 *
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.NeutralTreeTable.prototype.healths = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
battlecode.schema.NeutralTreeTable.prototype.healthsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Float32Array}
 */
battlecode.schema.NeutralTreeTable.prototype.healthsArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * The max healths of the trees.
 *
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.NeutralTreeTable.prototype.maxHealths = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
battlecode.schema.NeutralTreeTable.prototype.maxHealthsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Float32Array}
 */
battlecode.schema.NeutralTreeTable.prototype.maxHealthsArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * The bullets contained within the trees.
 *
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.NeutralTreeTable.prototype.containedBullets = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
battlecode.schema.NeutralTreeTable.prototype.containedBulletsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Int32Array}
 */
battlecode.schema.NeutralTreeTable.prototype.containedBulletsArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * The bodies contained within the trees.
 *
 * @param {number} index
 * @returns {battlecode.schema.BodyType}
 */
battlecode.schema.NeutralTreeTable.prototype.containedBodies = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 16);
  return offset ? /** @type {battlecode.schema.BodyType} */ (this.bb.readInt8(this.bb.__vector(this.bb_pos + offset) + index)) : 0;
};

/**
 * @returns {number}
 */
battlecode.schema.NeutralTreeTable.prototype.containedBodiesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 16);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Int8Array}
 */
battlecode.schema.NeutralTreeTable.prototype.containedBodiesArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 16);
  return offset ? new Int8Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
battlecode.schema.NeutralTreeTable.startNeutralTreeTable = function(builder) {
  builder.startObject(7);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} robotIDsOffset
 */
battlecode.schema.NeutralTreeTable.addRobotIDs = function(builder, robotIDsOffset) {
  builder.addFieldOffset(0, robotIDsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.NeutralTreeTable.createRobotIDsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.NeutralTreeTable.startRobotIDsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} locsOffset
 */
battlecode.schema.NeutralTreeTable.addLocs = function(builder, locsOffset) {
  builder.addFieldOffset(1, locsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} radiiOffset
 */
battlecode.schema.NeutralTreeTable.addRadii = function(builder, radiiOffset) {
  builder.addFieldOffset(2, radiiOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.NeutralTreeTable.createRadiiVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.NeutralTreeTable.startRadiiVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} healthsOffset
 */
battlecode.schema.NeutralTreeTable.addHealths = function(builder, healthsOffset) {
  builder.addFieldOffset(3, healthsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.NeutralTreeTable.createHealthsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.NeutralTreeTable.startHealthsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} maxHealthsOffset
 */
battlecode.schema.NeutralTreeTable.addMaxHealths = function(builder, maxHealthsOffset) {
  builder.addFieldOffset(4, maxHealthsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.NeutralTreeTable.createMaxHealthsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.NeutralTreeTable.startMaxHealthsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} containedBulletsOffset
 */
battlecode.schema.NeutralTreeTable.addContainedBullets = function(builder, containedBulletsOffset) {
  builder.addFieldOffset(5, containedBulletsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.NeutralTreeTable.createContainedBulletsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.NeutralTreeTable.startContainedBulletsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} containedBodiesOffset
 */
battlecode.schema.NeutralTreeTable.addContainedBodies = function(builder, containedBodiesOffset) {
  builder.addFieldOffset(6, containedBodiesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<battlecode.schema.BodyType>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.NeutralTreeTable.createContainedBodiesVector = function(builder, data) {
  builder.startVector(1, data.length, 1);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.NeutralTreeTable.startContainedBodiesVector = function(builder, numElems) {
  builder.startVector(1, numElems, 1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.NeutralTreeTable.endNeutralTreeTable = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * A list of new bullets to be placed on the map.
 *
 * @constructor
 */
battlecode.schema.SpawnedBulletTable = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {battlecode.schema.SpawnedBulletTable}
 */
battlecode.schema.SpawnedBulletTable.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.SpawnedBulletTable=} obj
 * @returns {battlecode.schema.SpawnedBulletTable}
 */
battlecode.schema.SpawnedBulletTable.getRootAsSpawnedBulletTable = function(bb, obj) {
  return (obj || new battlecode.schema.SpawnedBulletTable).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * The numeric ID of the new bullets.
 * Will never be negative.
 * There will only be one body/bullet with a particular ID at a time.
 * So, there will never be two robots with the same ID, or a robot and
 * a bullet with the same ID.
 *
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.SpawnedBulletTable.prototype.robotIDs = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
battlecode.schema.SpawnedBulletTable.prototype.robotIDsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Int32Array}
 */
battlecode.schema.SpawnedBulletTable.prototype.robotIDsArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * The locations of the bodies.
 *
 * @param {battlecode.schema.VecTable=} obj
 * @returns {battlecode.schema.VecTable}
 */
battlecode.schema.SpawnedBulletTable.prototype.locs = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new battlecode.schema.VecTable).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * The velocities of the bodies.
 *
 * @param {battlecode.schema.VecTable=} obj
 * @returns {battlecode.schema.VecTable}
 */
battlecode.schema.SpawnedBulletTable.prototype.vels = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new battlecode.schema.VecTable).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * The damage levels of the bodies.
 *
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.SpawnedBulletTable.prototype.damages = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
battlecode.schema.SpawnedBulletTable.prototype.damagesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Float32Array}
 */
battlecode.schema.SpawnedBulletTable.prototype.damagesArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
battlecode.schema.SpawnedBulletTable.startSpawnedBulletTable = function(builder) {
  builder.startObject(4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} robotIDsOffset
 */
battlecode.schema.SpawnedBulletTable.addRobotIDs = function(builder, robotIDsOffset) {
  builder.addFieldOffset(0, robotIDsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.SpawnedBulletTable.createRobotIDsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.SpawnedBulletTable.startRobotIDsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} locsOffset
 */
battlecode.schema.SpawnedBulletTable.addLocs = function(builder, locsOffset) {
  builder.addFieldOffset(1, locsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} velsOffset
 */
battlecode.schema.SpawnedBulletTable.addVels = function(builder, velsOffset) {
  builder.addFieldOffset(2, velsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} damagesOffset
 */
battlecode.schema.SpawnedBulletTable.addDamages = function(builder, damagesOffset) {
  builder.addFieldOffset(3, damagesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.SpawnedBulletTable.createDamagesVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.SpawnedBulletTable.startDamagesVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.SpawnedBulletTable.endSpawnedBulletTable = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * The map a round is played on.
 *
 * @constructor
 */
battlecode.schema.GameMap = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {battlecode.schema.GameMap}
 */
battlecode.schema.GameMap.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.GameMap=} obj
 * @returns {battlecode.schema.GameMap}
 */
battlecode.schema.GameMap.getRootAsGameMap = function(bb, obj) {
  return (obj || new battlecode.schema.GameMap).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * The name of a map.
 *
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
battlecode.schema.GameMap.prototype.name = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * The bottom corner of the map.
 *
 * @param {battlecode.schema.Vec=} obj
 * @returns {battlecode.schema.Vec}
 */
battlecode.schema.GameMap.prototype.minCorner = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new battlecode.schema.Vec).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * The top corner of the map.
 *
 * @param {battlecode.schema.Vec=} obj
 * @returns {battlecode.schema.Vec}
 */
battlecode.schema.GameMap.prototype.maxCorner = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new battlecode.schema.Vec).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * The bodies on the map.
 *
 * @param {battlecode.schema.SpawnedBodyTable=} obj
 * @returns {battlecode.schema.SpawnedBodyTable}
 */
battlecode.schema.GameMap.prototype.bodies = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? (obj || new battlecode.schema.SpawnedBodyTable).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * The neutral trees on the map.
 *
 * @param {battlecode.schema.NeutralTreeTable=} obj
 * @returns {battlecode.schema.NeutralTreeTable}
 */
battlecode.schema.GameMap.prototype.trees = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? (obj || new battlecode.schema.NeutralTreeTable).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * The random seed of the map.
 *
 * @returns {number}
 */
battlecode.schema.GameMap.prototype.randomSeed = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
battlecode.schema.GameMap.startGameMap = function(builder) {
  builder.startObject(6);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 */
battlecode.schema.GameMap.addName = function(builder, nameOffset) {
  builder.addFieldOffset(0, nameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} minCornerOffset
 */
battlecode.schema.GameMap.addMinCorner = function(builder, minCornerOffset) {
  builder.addFieldStruct(1, minCornerOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} maxCornerOffset
 */
battlecode.schema.GameMap.addMaxCorner = function(builder, maxCornerOffset) {
  builder.addFieldStruct(2, maxCornerOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} bodiesOffset
 */
battlecode.schema.GameMap.addBodies = function(builder, bodiesOffset) {
  builder.addFieldOffset(3, bodiesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} treesOffset
 */
battlecode.schema.GameMap.addTrees = function(builder, treesOffset) {
  builder.addFieldOffset(4, treesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} randomSeed
 */
battlecode.schema.GameMap.addRandomSeed = function(builder, randomSeed) {
  builder.addFieldInt32(5, randomSeed, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.GameMap.endGameMap = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * Metadata about all bodies of a particular type.
 *
 * @constructor
 */
battlecode.schema.BodyTypeMetadata = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {battlecode.schema.BodyTypeMetadata}
 */
battlecode.schema.BodyTypeMetadata.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.BodyTypeMetadata=} obj
 * @returns {battlecode.schema.BodyTypeMetadata}
 */
battlecode.schema.BodyTypeMetadata.getRootAsBodyTypeMetadata = function(bb, obj) {
  return (obj || new battlecode.schema.BodyTypeMetadata).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * The relevant type.
 *
 * @returns {battlecode.schema.BodyType}
 */
battlecode.schema.BodyTypeMetadata.prototype.type = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? /** @type {battlecode.schema.BodyType} */ (this.bb.readInt8(this.bb_pos + offset)) : battlecode.schema.BodyType.ARCHON;
};

/**
 * The radius of the type, in distance units.
 *
 * @returns {number}
 */
battlecode.schema.BodyTypeMetadata.prototype.radius = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * The cost of the type, in bullets.
 *
 * @returns {number}
 */
battlecode.schema.BodyTypeMetadata.prototype.cost = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * The maxiumum health of the type, in health units.
 *
 * @returns {number}
 */
battlecode.schema.BodyTypeMetadata.prototype.maxHealth = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * If unset, the same as maxHealth.
 * Otherwise, the health a body of this type starts with.
 *
 * @returns {number}
 */
battlecode.schema.BodyTypeMetadata.prototype.startHealth = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * The maximum distance this type can move each turn
 *
 * @returns {number}
 */
battlecode.schema.BodyTypeMetadata.prototype.strideRadius = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * The speed that bullets from this unit move.
 * Note: you don't need to keep track of this, SpawnedBody.vel will always be set.
 *
 * @returns {number}
 */
battlecode.schema.BodyTypeMetadata.prototype.bulletSpeed = function() {
  var offset = this.bb.__offset(this.bb_pos, 16);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * The damage that bullets from this unit inflict.
 * Note: you don't need to keep track of this.
 *
 * @returns {number}
 */
battlecode.schema.BodyTypeMetadata.prototype.bulletAttack = function() {
  var offset = this.bb.__offset(this.bb_pos, 18);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * The maximum distance this type can sense other trees and robots
 *
 * @returns {number}
 */
battlecode.schema.BodyTypeMetadata.prototype.sightRadius = function() {
  var offset = this.bb.__offset(this.bb_pos, 20);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * The maximum distance this type can sense bullets
 *
 * @returns {number}
 */
battlecode.schema.BodyTypeMetadata.prototype.bulletSightRadius = function() {
  var offset = this.bb.__offset(this.bb_pos, 22);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
battlecode.schema.BodyTypeMetadata.startBodyTypeMetadata = function(builder) {
  builder.startObject(10);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {battlecode.schema.BodyType} type
 */
battlecode.schema.BodyTypeMetadata.addType = function(builder, type) {
  builder.addFieldInt8(0, type, battlecode.schema.BodyType.ARCHON);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} radius
 */
battlecode.schema.BodyTypeMetadata.addRadius = function(builder, radius) {
  builder.addFieldFloat32(1, radius, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} cost
 */
battlecode.schema.BodyTypeMetadata.addCost = function(builder, cost) {
  builder.addFieldFloat32(2, cost, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} maxHealth
 */
battlecode.schema.BodyTypeMetadata.addMaxHealth = function(builder, maxHealth) {
  builder.addFieldFloat32(3, maxHealth, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} startHealth
 */
battlecode.schema.BodyTypeMetadata.addStartHealth = function(builder, startHealth) {
  builder.addFieldFloat32(4, startHealth, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} strideRadius
 */
battlecode.schema.BodyTypeMetadata.addStrideRadius = function(builder, strideRadius) {
  builder.addFieldFloat32(5, strideRadius, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} bulletSpeed
 */
battlecode.schema.BodyTypeMetadata.addBulletSpeed = function(builder, bulletSpeed) {
  builder.addFieldFloat32(6, bulletSpeed, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} bulletAttack
 */
battlecode.schema.BodyTypeMetadata.addBulletAttack = function(builder, bulletAttack) {
  builder.addFieldFloat32(7, bulletAttack, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} sightRadius
 */
battlecode.schema.BodyTypeMetadata.addSightRadius = function(builder, sightRadius) {
  builder.addFieldFloat32(8, sightRadius, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} bulletSightRadius
 */
battlecode.schema.BodyTypeMetadata.addBulletSightRadius = function(builder, bulletSightRadius) {
  builder.addFieldFloat32(9, bulletSightRadius, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.BodyTypeMetadata.endBodyTypeMetadata = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * Data relevant to a particular team.
 *
 * @constructor
 */
battlecode.schema.TeamData = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {battlecode.schema.TeamData}
 */
battlecode.schema.TeamData.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.TeamData=} obj
 * @returns {battlecode.schema.TeamData}
 */
battlecode.schema.TeamData.getRootAsTeamData = function(bb, obj) {
  return (obj || new battlecode.schema.TeamData).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * The name of the team.
 *
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
battlecode.schema.TeamData.prototype.name = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * The java package the team uses.
 *
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
battlecode.schema.TeamData.prototype.packageName = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * The ID of the team this data pertains to.
 *
 * @returns {number}
 */
battlecode.schema.TeamData.prototype.teamID = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
battlecode.schema.TeamData.startTeamData = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 */
battlecode.schema.TeamData.addName = function(builder, nameOffset) {
  builder.addFieldOffset(0, nameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} packageNameOffset
 */
battlecode.schema.TeamData.addPackageName = function(builder, packageNameOffset) {
  builder.addFieldOffset(1, packageNameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} teamID
 */
battlecode.schema.TeamData.addTeamID = function(builder, teamID) {
  builder.addFieldInt8(2, teamID, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.TeamData.endTeamData = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * The first event sent in the game. Contains all metadata about the game.
 *
 * @constructor
 */
battlecode.schema.GameHeader = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {battlecode.schema.GameHeader}
 */
battlecode.schema.GameHeader.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.GameHeader=} obj
 * @returns {battlecode.schema.GameHeader}
 */
battlecode.schema.GameHeader.getRootAsGameHeader = function(bb, obj) {
  return (obj || new battlecode.schema.GameHeader).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * The version of the spec this game complies with.
 *
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
battlecode.schema.GameHeader.prototype.specVersion = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * The teams participating in the game.
 *
 * @param {number} index
 * @param {battlecode.schema.TeamData=} obj
 * @returns {battlecode.schema.TeamData}
 */
battlecode.schema.GameHeader.prototype.teams = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new battlecode.schema.TeamData).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
battlecode.schema.GameHeader.prototype.teamsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * Information about all body types in the game.
 *
 * @param {number} index
 * @param {battlecode.schema.BodyTypeMetadata=} obj
 * @returns {battlecode.schema.BodyTypeMetadata}
 */
battlecode.schema.GameHeader.prototype.bodyTypeMetadata = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new battlecode.schema.BodyTypeMetadata).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
battlecode.schema.GameHeader.prototype.bodyTypeMetadataLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
battlecode.schema.GameHeader.startGameHeader = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} specVersionOffset
 */
battlecode.schema.GameHeader.addSpecVersion = function(builder, specVersionOffset) {
  builder.addFieldOffset(0, specVersionOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} teamsOffset
 */
battlecode.schema.GameHeader.addTeams = function(builder, teamsOffset) {
  builder.addFieldOffset(1, teamsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.GameHeader.createTeamsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.GameHeader.startTeamsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} bodyTypeMetadataOffset
 */
battlecode.schema.GameHeader.addBodyTypeMetadata = function(builder, bodyTypeMetadataOffset) {
  builder.addFieldOffset(2, bodyTypeMetadataOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.GameHeader.createBodyTypeMetadataVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.GameHeader.startBodyTypeMetadataVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.GameHeader.endGameHeader = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * The final event sent in the game.
 *
 * @constructor
 */
battlecode.schema.GameFooter = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {battlecode.schema.GameFooter}
 */
battlecode.schema.GameFooter.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.GameFooter=} obj
 * @returns {battlecode.schema.GameFooter}
 */
battlecode.schema.GameFooter.getRootAsGameFooter = function(bb, obj) {
  return (obj || new battlecode.schema.GameFooter).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * The ID of the winning team of the game.
 *
 * @returns {number}
 */
battlecode.schema.GameFooter.prototype.winner = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
battlecode.schema.GameFooter.startGameFooter = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} winner
 */
battlecode.schema.GameFooter.addWinner = function(builder, winner) {
  builder.addFieldInt8(0, winner, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.GameFooter.endGameFooter = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * Sent to start a match.
 *
 * @constructor
 */
battlecode.schema.MatchHeader = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {battlecode.schema.MatchHeader}
 */
battlecode.schema.MatchHeader.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.MatchHeader=} obj
 * @returns {battlecode.schema.MatchHeader}
 */
battlecode.schema.MatchHeader.getRootAsMatchHeader = function(bb, obj) {
  return (obj || new battlecode.schema.MatchHeader).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * The map the match was played on.
 *
 * @param {battlecode.schema.GameMap=} obj
 * @returns {battlecode.schema.GameMap}
 */
battlecode.schema.MatchHeader.prototype.map = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new battlecode.schema.GameMap).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * The maximum number of rounds in this match.
 *
 * @returns {number}
 */
battlecode.schema.MatchHeader.prototype.maxRounds = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
battlecode.schema.MatchHeader.startMatchHeader = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} mapOffset
 */
battlecode.schema.MatchHeader.addMap = function(builder, mapOffset) {
  builder.addFieldOffset(0, mapOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} maxRounds
 */
battlecode.schema.MatchHeader.addMaxRounds = function(builder, maxRounds) {
  builder.addFieldInt32(1, maxRounds, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.MatchHeader.endMatchHeader = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * Sent to end a match.
 *
 * @constructor
 */
battlecode.schema.MatchFooter = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {battlecode.schema.MatchFooter}
 */
battlecode.schema.MatchFooter.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.MatchFooter=} obj
 * @returns {battlecode.schema.MatchFooter}
 */
battlecode.schema.MatchFooter.getRootAsMatchFooter = function(bb, obj) {
  return (obj || new battlecode.schema.MatchFooter).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * The ID of the winning team.
 *
 * @returns {number}
 */
battlecode.schema.MatchFooter.prototype.winner = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
};

/**
 * The number of rounds played.
 *
 * @returns {number}
 */
battlecode.schema.MatchFooter.prototype.totalRounds = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
battlecode.schema.MatchFooter.startMatchFooter = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} winner
 */
battlecode.schema.MatchFooter.addWinner = function(builder, winner) {
  builder.addFieldInt8(0, winner, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} totalRounds
 */
battlecode.schema.MatchFooter.addTotalRounds = function(builder, totalRounds) {
  builder.addFieldInt32(1, totalRounds, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.MatchFooter.endMatchFooter = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * A single time-step in a Game.
 * The bulk of the data in the file is stored in tables like this.
 * Note that a struct-of-arrays format is more space efficient than an array-
 * of-structs.
 *
 * @constructor
 */
battlecode.schema.Round = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {battlecode.schema.Round}
 */
battlecode.schema.Round.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.Round=} obj
 * @returns {battlecode.schema.Round}
 */
battlecode.schema.Round.getRootAsRound = function(bb, obj) {
  return (obj || new battlecode.schema.Round).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * The IDs of teams in the Game.
 *
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.Round.prototype.teamIDs = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
battlecode.schema.Round.prototype.teamIDsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Int32Array}
 */
battlecode.schema.Round.prototype.teamIDsArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * The bullet counts of the teams.
 *
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.Round.prototype.teamBullets = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
battlecode.schema.Round.prototype.teamBulletsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Float32Array}
 */
battlecode.schema.Round.prototype.teamBulletsArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * The victory points of the teams.
 *
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.Round.prototype.teamVictoryPoints = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
battlecode.schema.Round.prototype.teamVictoryPointsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Int32Array}
 */
battlecode.schema.Round.prototype.teamVictoryPointsArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * The IDs of bodies that moved.
 *
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.Round.prototype.movedIDs = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
battlecode.schema.Round.prototype.movedIDsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Int32Array}
 */
battlecode.schema.Round.prototype.movedIDsArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * The new locations of bodies that have moved. They are defined to be in
 * their new locations at exactly the time round.number*dt.
 *
 * @param {battlecode.schema.VecTable=} obj
 * @returns {battlecode.schema.VecTable}
 */
battlecode.schema.Round.prototype.movedLocs = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? (obj || new battlecode.schema.VecTable).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * New bodies.
 *
 * @param {battlecode.schema.SpawnedBodyTable=} obj
 * @returns {battlecode.schema.SpawnedBodyTable}
 */
battlecode.schema.Round.prototype.spawnedBodies = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? (obj || new battlecode.schema.SpawnedBodyTable).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * New bullets.
 *
 * @param {battlecode.schema.SpawnedBulletTable=} obj
 * @returns {battlecode.schema.SpawnedBulletTable}
 */
battlecode.schema.Round.prototype.spawnedBullets = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 16);
  return offset ? (obj || new battlecode.schema.SpawnedBulletTable).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * The IDs of bodies with changed health.
 *
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.Round.prototype.healthChangedIDs = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 18);
  return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
battlecode.schema.Round.prototype.healthChangedIDsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 18);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Int32Array}
 */
battlecode.schema.Round.prototype.healthChangedIDsArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 18);
  return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * The new health levels of bodies with changed health.
 *
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.Round.prototype.healthChangeLevels = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 20);
  return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
battlecode.schema.Round.prototype.healthChangeLevelsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 20);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Float32Array}
 */
battlecode.schema.Round.prototype.healthChangeLevelsArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 20);
  return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * The IDs of bodies that died.
 *
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.Round.prototype.diedIDs = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 22);
  return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
battlecode.schema.Round.prototype.diedIDsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 22);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Int32Array}
 */
battlecode.schema.Round.prototype.diedIDsArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 22);
  return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * The IDs of bullets that died.
 *
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.Round.prototype.diedBulletIDs = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 24);
  return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
battlecode.schema.Round.prototype.diedBulletIDsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 24);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Int32Array}
 */
battlecode.schema.Round.prototype.diedBulletIDsArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 24);
  return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * The IDs of robots that performed actions.
 * IDs may repeat.
 *
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.Round.prototype.actionIDs = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 26);
  return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
battlecode.schema.Round.prototype.actionIDsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 26);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Int32Array}
 */
battlecode.schema.Round.prototype.actionIDsArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 26);
  return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * The actions performed.
 *
 * @param {number} index
 * @returns {battlecode.schema.Action}
 */
battlecode.schema.Round.prototype.actions = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 28);
  return offset ? /** @type {battlecode.schema.Action} */ (this.bb.readInt8(this.bb.__vector(this.bb_pos + offset) + index)) : 0;
};

/**
 * @returns {number}
 */
battlecode.schema.Round.prototype.actionsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 28);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Int8Array}
 */
battlecode.schema.Round.prototype.actionsArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 28);
  return offset ? new Int8Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * The 'targets' of the performed actions. Actions without targets may have
 * any target (typically 0).
 *
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.Round.prototype.actionTargets = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 30);
  return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
battlecode.schema.Round.prototype.actionTargetsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 30);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Int32Array}
 */
battlecode.schema.Round.prototype.actionTargetsArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 30);
  return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * The IDs of bodies that set indicator dots
 *
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.Round.prototype.indicatorDotIDs = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 32);
  return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
battlecode.schema.Round.prototype.indicatorDotIDsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 32);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Int32Array}
 */
battlecode.schema.Round.prototype.indicatorDotIDsArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 32);
  return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * The location of the indicator dots
 *
 * @param {battlecode.schema.VecTable=} obj
 * @returns {battlecode.schema.VecTable}
 */
battlecode.schema.Round.prototype.indicatorDotLocs = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 34);
  return offset ? (obj || new battlecode.schema.VecTable).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * The RGB values of the indicator dots
 *
 * @param {battlecode.schema.RGBTable=} obj
 * @returns {battlecode.schema.RGBTable}
 */
battlecode.schema.Round.prototype.indicatorDotRGBs = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 36);
  return offset ? (obj || new battlecode.schema.RGBTable).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * The IDs of bodies that set indicator lines
 *
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.Round.prototype.indicatorLineIDs = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 38);
  return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
battlecode.schema.Round.prototype.indicatorLineIDsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 38);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Int32Array}
 */
battlecode.schema.Round.prototype.indicatorLineIDsArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 38);
  return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * The start location of the indicator lines
 *
 * @param {battlecode.schema.VecTable=} obj
 * @returns {battlecode.schema.VecTable}
 */
battlecode.schema.Round.prototype.indicatorLineStartLocs = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 40);
  return offset ? (obj || new battlecode.schema.VecTable).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * The end location of the indicator lines
 *
 * @param {battlecode.schema.VecTable=} obj
 * @returns {battlecode.schema.VecTable}
 */
battlecode.schema.Round.prototype.indicatorLineEndLocs = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 42);
  return offset ? (obj || new battlecode.schema.VecTable).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * The RGB values of the indicator lines
 *
 * @param {battlecode.schema.RGBTable=} obj
 * @returns {battlecode.schema.RGBTable}
 */
battlecode.schema.Round.prototype.indicatorLineRGBs = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 44);
  return offset ? (obj || new battlecode.schema.RGBTable).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * All logs sent this round.
 * Messages from a particular robot in this round start on a new line, and
 * have a header:
 * '[' $TEAM ':' $ROBOTTYPE '#' $ID '@' $ROUND '] '
 * $TEAM = 'A' | 'B'
 * $ROBOTTYPE = 'ARCHON' | 'GARDENER' | 'LUMBERJACK'
 *            | 'SOLDIER' | 'TANK' | 'SCOUT' | other names...
 * $ID = a number
 * $ROUND = a number
 * The header is not necessarily followed by a newline.
 * This header should only be sent once per robot per round (although
 * players may forge it, so don't crash if you get strange input.)
 *
 * You should try to only read this value once, and cache it. Reading
 * strings from a flatbuffer is much less efficient than reading other
 * buffers, because they need to be copied into an environment-provided
 * buffer and validated.
 *
 * (haha i guess you can never really escape string parsing can you)
 *
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
battlecode.schema.Round.prototype.logs = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 46);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * The first sent Round in a match should have index 1. (The starting state,
 * created by the MatchHeader, can be thought to have index 0.)
 * It should increase by one for each following round.
 *
 * @returns {number}
 */
battlecode.schema.Round.prototype.roundID = function() {
  var offset = this.bb.__offset(this.bb_pos, 48);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * The IDs of player bodies.
 *
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.Round.prototype.bytecodeIDs = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 50);
  return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
battlecode.schema.Round.prototype.bytecodeIDsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 50);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Int32Array}
 */
battlecode.schema.Round.prototype.bytecodeIDsArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 50);
  return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * The bytecodes used by the player bodies.
 *
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.Round.prototype.bytecodesUsed = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 52);
  return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
battlecode.schema.Round.prototype.bytecodesUsedLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 52);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Int32Array}
 */
battlecode.schema.Round.prototype.bytecodesUsedArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 52);
  return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * The IDs of trees that were shaken.
 *
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.Round.prototype.shakenIDs = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 54);
  return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
battlecode.schema.Round.prototype.shakenIDsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 54);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Int32Array}
 */
battlecode.schema.Round.prototype.shakenIDsArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 54);
  return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
battlecode.schema.Round.startRound = function(builder) {
  builder.startObject(26);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} teamIDsOffset
 */
battlecode.schema.Round.addTeamIDs = function(builder, teamIDsOffset) {
  builder.addFieldOffset(0, teamIDsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.Round.createTeamIDsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.Round.startTeamIDsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} teamBulletsOffset
 */
battlecode.schema.Round.addTeamBullets = function(builder, teamBulletsOffset) {
  builder.addFieldOffset(1, teamBulletsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.Round.createTeamBulletsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.Round.startTeamBulletsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} teamVictoryPointsOffset
 */
battlecode.schema.Round.addTeamVictoryPoints = function(builder, teamVictoryPointsOffset) {
  builder.addFieldOffset(2, teamVictoryPointsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.Round.createTeamVictoryPointsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.Round.startTeamVictoryPointsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} movedIDsOffset
 */
battlecode.schema.Round.addMovedIDs = function(builder, movedIDsOffset) {
  builder.addFieldOffset(3, movedIDsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.Round.createMovedIDsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.Round.startMovedIDsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} movedLocsOffset
 */
battlecode.schema.Round.addMovedLocs = function(builder, movedLocsOffset) {
  builder.addFieldOffset(4, movedLocsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} spawnedBodiesOffset
 */
battlecode.schema.Round.addSpawnedBodies = function(builder, spawnedBodiesOffset) {
  builder.addFieldOffset(5, spawnedBodiesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} spawnedBulletsOffset
 */
battlecode.schema.Round.addSpawnedBullets = function(builder, spawnedBulletsOffset) {
  builder.addFieldOffset(6, spawnedBulletsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} healthChangedIDsOffset
 */
battlecode.schema.Round.addHealthChangedIDs = function(builder, healthChangedIDsOffset) {
  builder.addFieldOffset(7, healthChangedIDsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.Round.createHealthChangedIDsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.Round.startHealthChangedIDsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} healthChangeLevelsOffset
 */
battlecode.schema.Round.addHealthChangeLevels = function(builder, healthChangeLevelsOffset) {
  builder.addFieldOffset(8, healthChangeLevelsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.Round.createHealthChangeLevelsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.Round.startHealthChangeLevelsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} diedIDsOffset
 */
battlecode.schema.Round.addDiedIDs = function(builder, diedIDsOffset) {
  builder.addFieldOffset(9, diedIDsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.Round.createDiedIDsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.Round.startDiedIDsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} diedBulletIDsOffset
 */
battlecode.schema.Round.addDiedBulletIDs = function(builder, diedBulletIDsOffset) {
  builder.addFieldOffset(10, diedBulletIDsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.Round.createDiedBulletIDsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.Round.startDiedBulletIDsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} actionIDsOffset
 */
battlecode.schema.Round.addActionIDs = function(builder, actionIDsOffset) {
  builder.addFieldOffset(11, actionIDsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.Round.createActionIDsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.Round.startActionIDsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} actionsOffset
 */
battlecode.schema.Round.addActions = function(builder, actionsOffset) {
  builder.addFieldOffset(12, actionsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<battlecode.schema.Action>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.Round.createActionsVector = function(builder, data) {
  builder.startVector(1, data.length, 1);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.Round.startActionsVector = function(builder, numElems) {
  builder.startVector(1, numElems, 1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} actionTargetsOffset
 */
battlecode.schema.Round.addActionTargets = function(builder, actionTargetsOffset) {
  builder.addFieldOffset(13, actionTargetsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.Round.createActionTargetsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.Round.startActionTargetsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} indicatorDotIDsOffset
 */
battlecode.schema.Round.addIndicatorDotIDs = function(builder, indicatorDotIDsOffset) {
  builder.addFieldOffset(14, indicatorDotIDsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.Round.createIndicatorDotIDsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.Round.startIndicatorDotIDsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} indicatorDotLocsOffset
 */
battlecode.schema.Round.addIndicatorDotLocs = function(builder, indicatorDotLocsOffset) {
  builder.addFieldOffset(15, indicatorDotLocsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} indicatorDotRGBsOffset
 */
battlecode.schema.Round.addIndicatorDotRGBs = function(builder, indicatorDotRGBsOffset) {
  builder.addFieldOffset(16, indicatorDotRGBsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} indicatorLineIDsOffset
 */
battlecode.schema.Round.addIndicatorLineIDs = function(builder, indicatorLineIDsOffset) {
  builder.addFieldOffset(17, indicatorLineIDsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.Round.createIndicatorLineIDsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.Round.startIndicatorLineIDsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} indicatorLineStartLocsOffset
 */
battlecode.schema.Round.addIndicatorLineStartLocs = function(builder, indicatorLineStartLocsOffset) {
  builder.addFieldOffset(18, indicatorLineStartLocsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} indicatorLineEndLocsOffset
 */
battlecode.schema.Round.addIndicatorLineEndLocs = function(builder, indicatorLineEndLocsOffset) {
  builder.addFieldOffset(19, indicatorLineEndLocsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} indicatorLineRGBsOffset
 */
battlecode.schema.Round.addIndicatorLineRGBs = function(builder, indicatorLineRGBsOffset) {
  builder.addFieldOffset(20, indicatorLineRGBsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} logsOffset
 */
battlecode.schema.Round.addLogs = function(builder, logsOffset) {
  builder.addFieldOffset(21, logsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} roundID
 */
battlecode.schema.Round.addRoundID = function(builder, roundID) {
  builder.addFieldInt32(22, roundID, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} bytecodeIDsOffset
 */
battlecode.schema.Round.addBytecodeIDs = function(builder, bytecodeIDsOffset) {
  builder.addFieldOffset(23, bytecodeIDsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.Round.createBytecodeIDsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.Round.startBytecodeIDsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} bytecodesUsedOffset
 */
battlecode.schema.Round.addBytecodesUsed = function(builder, bytecodesUsedOffset) {
  builder.addFieldOffset(24, bytecodesUsedOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.Round.createBytecodesUsedVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.Round.startBytecodesUsedVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} shakenIDsOffset
 */
battlecode.schema.Round.addShakenIDs = function(builder, shakenIDsOffset) {
  builder.addFieldOffset(25, shakenIDsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.Round.createShakenIDsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.Round.startShakenIDsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.Round.endRound = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * Necessary due to flatbuffers requiring unions to be wrapped in tables.
 *
 * @constructor
 */
battlecode.schema.EventWrapper = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {battlecode.schema.EventWrapper}
 */
battlecode.schema.EventWrapper.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.EventWrapper=} obj
 * @returns {battlecode.schema.EventWrapper}
 */
battlecode.schema.EventWrapper.getRootAsEventWrapper = function(bb, obj) {
  return (obj || new battlecode.schema.EventWrapper).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {battlecode.schema.Event}
 */
battlecode.schema.EventWrapper.prototype.eType = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? /** @type {battlecode.schema.Event} */ (this.bb.readUint8(this.bb_pos + offset)) : battlecode.schema.Event.NONE;
};

/**
 * @param {flatbuffers.Table} obj
 * @returns {?flatbuffers.Table}
 */
battlecode.schema.EventWrapper.prototype.e = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
battlecode.schema.EventWrapper.startEventWrapper = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {battlecode.schema.Event} eType
 */
battlecode.schema.EventWrapper.addEType = function(builder, eType) {
  builder.addFieldInt8(0, eType, battlecode.schema.Event.NONE);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} eOffset
 */
battlecode.schema.EventWrapper.addE = function(builder, eOffset) {
  builder.addFieldOffset(1, eOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.EventWrapper.endEventWrapper = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * If events are not otherwise delimited, this wrapper structure
 * allows a game to be stored in a single buffer.
 * The first event will be a GameHeader; the last event will be a GameFooter.
 * matchHeaders[0] is the index of the 0th match header in the event stream,
 * corresponding to matchFooters[0]. These indices allow quick traversal of
 * the file.
 *
 * @constructor
 */
battlecode.schema.GameWrapper = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {battlecode.schema.GameWrapper}
 */
battlecode.schema.GameWrapper.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.GameWrapper=} obj
 * @returns {battlecode.schema.GameWrapper}
 */
battlecode.schema.GameWrapper.getRootAsGameWrapper = function(bb, obj) {
  return (obj || new battlecode.schema.GameWrapper).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * The series of events comprising the game.
 *
 * @param {number} index
 * @param {battlecode.schema.EventWrapper=} obj
 * @returns {battlecode.schema.EventWrapper}
 */
battlecode.schema.GameWrapper.prototype.events = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new battlecode.schema.EventWrapper).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
battlecode.schema.GameWrapper.prototype.eventsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * The indices of the headers of the matches, in order.
 *
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.GameWrapper.prototype.matchHeaders = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
battlecode.schema.GameWrapper.prototype.matchHeadersLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Int32Array}
 */
battlecode.schema.GameWrapper.prototype.matchHeadersArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * The indices of the footers of the matches, in order.
 *
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.GameWrapper.prototype.matchFooters = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
battlecode.schema.GameWrapper.prototype.matchFootersLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Int32Array}
 */
battlecode.schema.GameWrapper.prototype.matchFootersArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
battlecode.schema.GameWrapper.startGameWrapper = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} eventsOffset
 */
battlecode.schema.GameWrapper.addEvents = function(builder, eventsOffset) {
  builder.addFieldOffset(0, eventsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.GameWrapper.createEventsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.GameWrapper.startEventsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} matchHeadersOffset
 */
battlecode.schema.GameWrapper.addMatchHeaders = function(builder, matchHeadersOffset) {
  builder.addFieldOffset(1, matchHeadersOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.GameWrapper.createMatchHeadersVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.GameWrapper.startMatchHeadersVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} matchFootersOffset
 */
battlecode.schema.GameWrapper.addMatchFooters = function(builder, matchFootersOffset) {
  builder.addFieldOffset(2, matchFootersOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.GameWrapper.createMatchFootersVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.GameWrapper.startMatchFootersVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.GameWrapper.endGameWrapper = function(builder) {
  var offset = builder.endObject();
  return offset;
};

// Exports for Node.js and RequireJS
this.battlecode = battlecode;
